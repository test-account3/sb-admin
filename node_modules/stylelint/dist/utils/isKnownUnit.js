"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function (unit) {
  var _ref = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

  var _ref$only = _ref.only;
  var only = _ref$only === undefined ? false : _ref$only;

  var unitLowerCase = unit.toLowerCase();

  if (only && only === "length") {
    return knownLengthUnits.has(unitLowerCase);
  }

  var knownUnits = new Set([].concat(_toConsumableArray(knownNonLengthUnits), _toConsumableArray(knownLengthUnits)));

  return knownUnits.has(unit) || knownUnits.has(unitLowerCase);
};

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

/**
 * Check is known unit
 *
 * @param {string} Unit
 * @param {object} args - Named arguments object
 * @param {string} [args.only=false] - Check unit only with length
 * @return {boolean} If `true`, the unit is known
 */

var knownNonLengthUnits = new Set([
// Relative length units
"%",
// Time length units
"s", "ms",
// Angle
"deg", "grad", "turn", "rad",
// Frequency
"Hz", "kHz",
// Resolution
"dpi", "dpcm", "dppx"]);

var knownLengthUnits = new Set([
// Relative length units
"em", "ex", "ch", "rem",
// Viewport-percentage lengths
"vh", "vw", "vmin", "vmax", "vm",
// Absolute length units
"px", "mm", "cm", "in", "pt", "pc", "q"]);